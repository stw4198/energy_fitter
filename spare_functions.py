	def apply_fit_all(self):
		medium,medium_save = self.medium_detect()
		c_all = TCanvas( "c_all" , "Delta E "+medium, 200, 10, 700 ,500)
		conditions = "closestPMT > 0 && %s > 0" % self.nwindow
		fit = self.make_fit(self.nwindow,conditions)
		mc_energy,Emax,E,E_cut = self.energy_values(self.interval)
		#graph_vs_E = ("(%s*%s*%f) + (%s*%f) + %f - mc_energy:mc_energy>>deltaE_vs_E" % (self.nwindow,self.nwindow,fit[2],self.nwindow,fit[1],fit[0]))
		graph = ("(%s*%s*%f) + (%s*%f) + %f - mc_energy>>deltaE" % (self.nwindow,self.nwindow,fit[2],self.nwindow,fit[1],fit[0]))

		self.bonsai_t.Draw(graph,conditions)
		deltaE = root.gDirectory.Get("deltaE")
		deltaE.Fit("gaus")
		#gStyle.SetOptStat("RMe")
		#gStyle.SetStatX(0)
		#gStyle.SetStatY(0.98)
		gStyle.SetOptFit(11)
		deltaE.SetTitle("#DeltaE %s" % medium)
		deltaE.GetXaxis().SetTitle("#DeltaE [MeV]")
		deltaE.GetXaxis().SetRangeUser(-.4*E[-1],.4*Emax[-1])
		#fitted_hist.SaveAs("deltaE.root")
		save_dir = self.make_directory(medium_save)
		c_all.SaveAs("%s/Gaussian_fit_%s.png"%(save_dir,medium_save))

		#self.bonsai_t.Draw(graph_vs_E,conditions)
		#deltaE_vs_E = root.gDirectory.Get("deltaE_vs_E")
		#fitted_hist_vs_E.SaveAs("deltaE_vs_E.root")
		#deltaE_vs_E.SetTitle("#DeltaE vs E_{True} %s" % medium)
		#deltaE_vs_E.GetXaxis().SetTitle("E_{True} [MeV]")
		#deltaE_vs_E.GetYaxis().SetTitle("E_{Fit} - E_{True} [MeV]")
		#deltaE_vs_E.ProfileX().Draw("same")
		#gStyle.SetOptTitle(0)
		#t = TPaveText(0.2,0.92,0.8,0.98,"nbNDC")
		#t.AddText("#DeltaE vs E_{True} %s" % medium)
		#t.Draw()
		#y = TPaveText(0,0.2,0.05,0.8,"nbNDC")
		#y.AddText("#E_{Fit} - E_{True} [MeV]")
		#y.SetTextAngle(90.) #doesn't rotate properly
		#y.SetTextAlign(22)
		#y.Draw()
		#x = TPaveText(0.2,0,0.8,0.05,"nbNDC")
		#x.AddText("E_{True} [MeV]")
		#x.Draw()
		#gStyle.SetOptStat("RMe")
		#c1.SaveAs("deltaE_vs_E_%s.png"%medium_save)

	def apply_fit_discrete(self):
		medium,medium_save = self.medium_detect()
		#c1 = TCanvas( "c1" , "Delta E "+medium, 200, 10, 700 ,500)
		conditions = "closestPMT > 0 && %s > 0" % self.nwindow
		fit = self.make_fit(self.nwindow,conditions)
		graph = ("(%s*%s*%f) + (%s*%f) + %f - mc_energy>>deltaE" % (self.nwindow,self.nwindow,fit[2],self.nwindow,fit[1],fit[0]))
		mc_energy,Emax,E,E_cut = self.energy_values(self.interval)
		E = E[1:]
		save_dir = self.make_directory(medium_save)
		for i in tqdm(range(len(E_cut)),desc="Applying fit to all energies"):
			#canvas_name = "c_%i" % i
			c1 = TCanvas("c1" , "Delta E "+medium, 200, 10, 700 ,500)
			condition = "%s && %s" %(conditions,E_cut[i])
			print(condition)
			self.bonsai_t.Draw(graph,condition)
			deltaE = root.gDirectory.Get("deltaE")
			deltaE.Fit("gaus")
			gStyle.SetOptFit(11)
			deltaE.SetTitle("E = %f %s" % (E[i],medium))
			#deltaE.GetXaxis().SetTitle("#DeltaE [MeV]")
			#deltaE.GetXaxis().SetRangeUser(-.4*E[i],.4*Emax[i])
			c1.SaveAs("%s/Gaussian_fit_%s_%s.png"% (save_dir,medium_save,E[i]))
			with open("%s/stats_%s.txt" % (save_dir,medium_save),'a') as stats:
				stats.write("\nEnergy = %f\n" % E[i])
				stats.write("sigma = %s\n" % str(deltaE.GetFunction("gaus").GetParameter(2)))
				stats.write("mean = %s\n" % str(deltaE.GetFunction("gaus").GetParameter(1)))
			del c1
